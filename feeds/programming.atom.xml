<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Yet another site</title><link href="/" rel="alternate"></link><link href="/feeds/programming.atom.xml" rel="self"></link><id>/</id><updated>2019-08-11T21:05:20+02:00</updated><entry><title>Epislon</title><link href="/epislon.html" rel="alternate"></link><updated>2019-08-11T21:05:20+02:00</updated><author><name>Nekoo</name></author><id>tag:,2019-08-11:epislon.html</id><summary type="html">&lt;h2&gt;machine epsilon&lt;/h2&gt;
&lt;p&gt;https://en.wikipedia.org/wiki/Machine_epsilon&lt;/p&gt;
&lt;h2&gt;epsilon-delta defintion of limit&lt;/h2&gt;
&lt;p&gt;https://en.wikipedia.org/wiki/(%CE%B5,_%CE%B4)-definition_of_limit&lt;/p&gt;</summary><category term="Programming"></category></entry><entry><title>Serialization</title><link href="/serialization.html" rel="alternate"></link><updated>2019-03-10T14:28:03+01:00</updated><author><name>Nekoo</name></author><id>tag:,2019-03-10:serialization.html</id><summary type="html">&lt;p&gt;https://en.wikipedia.org/wiki/Serialization&lt;/p&gt;
&lt;p&gt;https://cs.stackexchange.com/questions/72102/understanding-serialization&lt;/p&gt;</summary><category term="Programming"></category></entry><entry><title>Header-only library</title><link href="/header-only-library.html" rel="alternate"></link><updated>2019-02-09T15:51:09+01:00</updated><author><name>Nekoo</name></author><id>tag:,2019-02-09:header-only-library.html</id><summary type="html">&lt;h2&gt;Function definition in the header&lt;/h2&gt;
&lt;p&gt;The preprocessor will literally copy the content of header into the including
file. The &lt;code&gt;ifdef&lt;/code&gt; guard makes sure, for a given file, the same header file is
only included once.&lt;/p&gt;
&lt;p&gt;It is fine that a function is defined in the header. The compiler(in this
sense, it doesn't include the assembler or linker part) won't complains any
thing. The C source file will be compiled into an object with symbol
information. When it comes to the linking stage, if there are multiple object
files have the same symbol definition in their symbol table, the linker will
throw error, something like "multiple definition".&lt;/p&gt;
&lt;p&gt;One way the circumvent this is to add &lt;code&gt;inline&lt;/code&gt; attribute to every function
definition in the header. So that no symbol will be created. The other possible
solution is to add &lt;code&gt;static&lt;/code&gt; attribute to the function definition.&lt;/p&gt;
&lt;h2&gt;Function definition inside class definition&lt;/h2&gt;
&lt;p&gt;A member function that is defined inside its class member list is called an
inline member function.&lt;/p&gt;
&lt;p&gt;Once can also declare the function as &lt;code&gt;inline&lt;/code&gt;, and define it outside of class
definition.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;inline&lt;/code&gt; attribute is merely a hint to the compiler. So it won't always give
the same effect as macro.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The main (only?) use for the inline keyword nowadays it to allow functions to
be defined in the header and not generate multiple definition link errors
(which has nothing to do with inlining really).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Template class&lt;/h2&gt;
&lt;p&gt;template libs must be provided as head-only form. The compiler need to know the
the parameter types as well as the library code at the time.&lt;/p&gt;
&lt;h2&gt;Advantage/Disadvantage of head-only library&lt;/h2&gt;
&lt;p&gt;In theory, the compiler could do better optimization when the definition is
visible to it. But nowadays, the compiler could do optimization across compilation
unit. And because of other complications like linker optimization, hardware
features, the benefit is not always observable.&lt;/p&gt;
&lt;p&gt;It is best to measure the code size and performance change with specific use
case. And code maintainability is also an import aspect to consider.&lt;/p&gt;
&lt;h2&gt;Link&lt;/h2&gt;
&lt;p&gt;https://stackoverflow.com/questions/16679709/defining-member-functions-inside-the-class-definition&lt;/p&gt;
&lt;p&gt;https://en.wikipedia.org/wiki/Header-only&lt;/p&gt;
&lt;p&gt;https://softwareengineering.stackexchange.com/questions/305618/are-header-only-libraries-more-efficient&lt;/p&gt;</summary><category term="Programming"></category></entry><entry><title>floating point</title><link href="/floating-point.html" rel="alternate"></link><updated>2019-01-23T17:16:15+01:00</updated><author><name>Nekoo</name></author><id>tag:,2019-01-23:floating-point.html</id><summary type="html">&lt;h1&gt;Floating point&lt;/h1&gt;
&lt;p&gt;In computing, floating-point arithmetic (FP) is arithmetic using formulaic
representation of real numbers as an approximation so as to support a trade-off
between range and precision. For this reason, floating-point computation is
often found in systems which include very small and very large real numbers,
which require fast processing times. A number is, in general, represented
approximately to a fixed number of significant digits (the significand)
and scaled using an exponent in some fixed base; the base for the scaling
is normally two, ten, or sixteen. A number that can be represented exactly
is of the following form:
&lt;/p&gt;
&lt;div class="math"&gt;$$significand \times base^{exponent}$$&lt;/div&gt;
&lt;p&gt;The term floating point refers to the fact that a number's radix point (decimal
point, or, more commonly in computers, binary point) can "float"; that is, it
can be placed anywhere relative to the significant digits of the number. This
position is indicated as the exponent component, and thus the floating-point
representation can be thought of as a kind of scientific notation.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IEEE 16-bit binary float&lt;br /&gt;
1 sign bit: s&lt;br /&gt;
5 bit for exponent: u.
11 bits for significand: m, (one bit is implicit, 10 bits are explicitly stored.)
bias: 15&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IEEE 32-bit binary float&lt;br /&gt;
1 sign bit: s&lt;br /&gt;
8 bit for exponent: u&lt;br /&gt;
24 bits for significand: m, (one bit is implicit, 23 bits are explicitly
                 stored.)
bias: 127&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IEEE 64-bit binary float&lt;br /&gt;
1 sign bit: s&lt;br /&gt;
11 for exponent: u&lt;br /&gt;
53 bits for significand: m, (one bit is implicit, 52 bit are explicitly stored)
bias: 1023  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IEEE 128-bit binary float&lt;br /&gt;
1 sign bit: s&lt;br /&gt;
15 for exponent: u&lt;br /&gt;
113 bits for significand: m, (one bit is implicit, 112 bit are explicitly stored)
bias: 16383  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some combinations of exponent and significant pattern are preserved for
specially number, e.g. 0, infinity, NaN.
&lt;/p&gt;
&lt;div class="math"&gt;\begin{align*}
e &amp;amp;= u - bias\\
significant &amp;amp;= 1(implicit) + m_1*2^{-1} + m_2*2^{-2} + ... m_m2^{-m}\\
val &amp;amp;= significant * 2 ^ {e}\\
\end{align*}&lt;/div&gt;
&lt;p&gt;For example, for number 216:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;float32_mem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;216&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uint32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;float32_mem&lt;/span&gt;
&lt;span class="mi"&gt;1129840640&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float32_mem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;0b1000011010110000000000000000000&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;#sign bit(31-bit): 0  &lt;/span&gt;
&lt;span class="c1"&gt;#exponent bit pattern(30-23bit): 0b10000110 (134)&lt;/span&gt;
&lt;span class="c1"&gt;#significand bit pattern(22-0bit): 0b10110000000000000000000&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mb"&gt;0b10000110&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;127&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;significant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;significant&lt;/span&gt;
&lt;span class="mf"&gt;1.6875&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;significant&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;
&lt;span class="mf"&gt;216.0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another example with rounding error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;float32_mem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16777216&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uint32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float32_mem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;0b1001011100000000000000000000000&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mb"&gt;0b10010111&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;127&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;significant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;significant&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;
&lt;span class="mf"&gt;16777216.0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;float32_mem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16777217&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uint32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float32_mem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;0b1001011100000000000000000000000&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mb"&gt;0b10010111&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;127&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;significant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;significant&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;
&lt;span class="mf"&gt;16777216.0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;significant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**-&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;significant&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;
&lt;span class="mf"&gt;16777218.0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
&lt;span class="mi"&gt;24&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;ULP, unit in th last place&lt;/h1&gt;
&lt;p&gt;given a normalized representation in float point
&lt;/p&gt;
&lt;div class="math"&gt;$$d_1.d_2...d_p \times \beta^e$$&lt;/div&gt;
&lt;p&gt;
&lt;span class="math"&gt;\(d_1\)&lt;/span&gt; is not zero. the ULP value is defined as:
&lt;/p&gt;
&lt;div class="math"&gt;$$ulp(e, p) \to \beta^{e-(p-1)}$$&lt;/div&gt;
&lt;p&gt;
For example:
&lt;/p&gt;
&lt;div class="math"&gt;$$1.625 * 10^{-4}; \; \beta=10, e = -4, p = 4$$&lt;/div&gt;
&lt;div class="math"&gt;$$ulp(10, 3) = 1 * 10^{-(p-1)} * 10^e = 10^{e-(p-1)} = 10^{-7}$$&lt;/div&gt;
&lt;p&gt;In general, if the floating-point number &lt;span class="math"&gt;\(d.d...d ×\beta^{e}\)&lt;/span&gt; is used to represent z,
then it is in error by &lt;span class="math"&gt;\(|d.d...d - (z/\beta^{e})|\beta^{p-1}\)&lt;/span&gt; units in the last place&lt;/p&gt;
&lt;h1&gt;&lt;a href="https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html"&gt;What Every Computer Scientist Should Know About Floating-Point Arithmetic&lt;/a&gt;&lt;/h1&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="Programming"></category></entry><entry><title>First order function</title><link href="/first-order-function.html" rel="alternate"></link><updated>2019-01-13T13:18:22+01:00</updated><author><name>Nekoo</name></author><id>tag:,2019-01-13:first-order-function.html</id><summary type="html">&lt;p&gt;ihttps://en.wikipedia.org/wiki/First-class_function&lt;/p&gt;</summary><category term="Programming"></category></entry></feed>